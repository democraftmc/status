---
import Layout from "../layouts/default.astro";

const key = import.meta.env.NETWEAK_API_KEY;

let data = null;

try {
  const response = await fetch("https://statut.democraft.fr/json", {
    method: "GET",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${key}` },
  });

  if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

  data = await response.json();
} catch (error) {
  console.error("Status fetch error:", error);
}

const groups = data?.groups ?? [];
const services = (data?.services ?? []).reduce((acc, service) => {
  acc[service.group_id] = acc[service.group_id] ?? [];
  acc[service.group_id].push(service);
  return acc;
}, {});
const recentIssues = data?.recent_issues ?? [];

const statusLabels = {
  operational: "Operational",
  ok: "Operational",
  online: "Online",
  maintenance: "Maintenance",
  degraded: "Degraded",
  offline: "Offline",
  incident: "Incident",
  minor: "Minor Issue",
  major: "Major Issue",
  planned: "Planned",
  in_progress: "In Progress",
  resolved: "Resolved",
};
const formatStatus = (value) => statusLabels[value] ?? value?.replace(/_/g, " ") ?? "Unknown";
const formatDate = (iso) =>
  iso ? new Date(iso).toLocaleString("fr-FR", { dateStyle: "medium", timeStyle: "short" }) : "N/A";
const logo = data?.logo_url ?? data?.logo_dark_url ?? "";
const hasData = Boolean(data);

const badgeVariants = {
  operational: "badge-success",
  ok: "badge-success",
  online: "badge-success",
  maintenance: "badge-warning",
  degraded: "badge-warning",
  offline: "badge-error",
  incident: "badge-error",
  major: "badge-error",
  minor: "badge-warning",
  planned: "badge-info",
  in_progress: "badge-info",
  resolved: "badge-success",
};
const badgeClass = (value, extra = "") => `badge ${badgeVariants[value] ?? "badge-ghost"} ${extra}`.trim();
---
<Layout>
	<div class="hero home-hero relative">
  <img src="https://wiki.democraft.fr/api/lobby" class="w-full h-96 md:h-112 object-cover rounded-b-3xl shadow-3xl" />
  <div class="hero-content text-center">
    <div>
      <img
        class="h-16 lg:h-40 mb-2"
        alt="Rendu 3D du nom du serveur Minecraft"
        src="https://us-east-1.tixte.net/uploads/cdn.democraft.fr/title_flat.png"
      />
      <span class={badgeClass(data.status)}>
          <div class="inline-grid *:[grid-area:1/1]">
            <div class="status status-neutral animate-ping"></div>
            <div class="status status-neutral"></div>
          </div>
		  { formatStatus(data.status) }
        </span>
      <br />
      <a href="#1" aria-label="Scroll vers le bas de la page">
        <iconify-icon icon="lucide:arrow-down" class="font-2xl mt-8" style="font-size: 48px"></iconify-icon>
      </a>
    </div>
  </div>
</div>

	<main class="container mx-auto flex flex-col gap-12 px-4 py-4">
    {hasData ? (
        <section class="space-y-6">
          <div class="grid gap-6">
            {groups.map((group) => (
              <div class="bg-base-200 border-2 border-base-300 rounded-lg shadow-md pb-4">
				<h3 class="pt-4 font-bold text-xl text-center font-[Minecraft_Five]">{group.name}</h3>
				{(services[group.id] ?? []).map((service) => (
					<div>
						<div class="divider"></div>
						<div class="px-2">
							<a class="flex" href={`/${service.id}`}	>
								<h4 class="card-title flex-1">{service.name}</h4>
								<span class={badgeClass(service.status)}>
									<div class="inline-grid *:[grid-area:1/1]">
										<div class="status status-neutral animate-ping"></div>
										<div class="status status-neutral"></div>
									</div>
									{ formatStatus(service.status) }
								</span>
							</a>
							<p>{service.description}</p>
						</div>
					</div>
				))}
			  </div>

            ))}
          </div>
        </section>

    ) : (
      <div class="alert alert-info justify-center shadow-lg">
        <span>Aucune donnée disponible pour le moment. Réessayez plus tard.</span>
      </div>
    )}
  </main>
</Layout>