---
import Layout from "../layouts/default.astro";
import { Icon } from "astro-icon/components";

const key = import.meta.env.NETWEAK_API_KEY;

export async function getStaticPaths() {
  try {
    const response = await fetch("https://status.democraft.fr/json", {
      method: "GET",
      headers: { "Content-Type": "application/json" },
    });

    if (!response.ok) {
      console.error(`HTTP error! status: ${response.status}`);
      return [];
    }

    const mainData = await response.json();
    const services = mainData?.services ?? [];

    return services.map((service) => ({
      params: { slug: service.serviceable_id },
      props: { service },
    }));
  } catch (error) {
    console.error("Error fetching services for static paths:", error);
    return [];
  }
}

const { service = {} } = Astro.props;
const { slug } = Astro.params;

console.log("Rendering page for slug:", slug, service.id);
---

<Layout title={service.name ?? slug}>
  <div class="hero home-hero relative">
    <img
      src="https://wiki.democraft.fr/api/lobby"
      class="w-full h-96 md:h-112 object-cover rounded-b-3xl shadow-3xl"
    />
    <a class="absolute top-20 left-2 btn btn-primary" href="/">
      <Icon name="lucide:arrow-left" class="mr-2" />
      Retour
    </a>
    <div class="hero-content text-center">
      <div>
        <h1 id="service-name" class="p-4 mb-2 rounded-lg glass text-3xl md:text-5xl font-bold">
          {service.name ?? slug}
        </h1>
        <span id="service-status" class="badge badge-ghost">
          <div class="inline-grid *:[grid-area:1/1]">
            <div class="status status-neutral animate-ping"></div>
            <div class="status status-neutral"></div>
          </div>
          <span id="service-status-label">Chargement…</span>
        </span>
        <br />
        <a href="#1" aria-label="Scroll vers le bas de la page">
          <iconify-icon icon="lucide:arrow-down" class="font-2xl mt-8" style="font-size: 48px"></iconify-icon>
        </a>
      </div>
    </div>
  </div>

  <span class="hidden" id="service-id">{ slug }</span>

  <main id="1" class="container mx-auto flex flex-col gap-12 px-4 py-12">
    <section id="server-section" class="hidden grid grid-cols-1 gap-6 md:grid-cols-3">
      <div class="col-span-full skeleton h-48"></div>
    </section>

    <section id="website-section" class="hidden grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
      <div class="col-span-full skeleton h-48"></div>
    </section>

    <div id="not-found" class="hidden alert alert-error justify-center shadow-lg">
      <span>Service introuvable.</span>
    </div>
  </main>

  <script type="module" data-astro-rerun>
    const SUMMARY_URL = "https://status.democraft.fr/json";
    // This skibidi key is restricted to read-only access for demonstration purposes.
    const skibidi = "OvZuej1OBCh8WdvXyUOIJzE9gYYFwbhHtRwrEX2Ed605fa1f";
    const slugValue = document.getElementById("service-id").textContent.trim();
    console.log("Loaded slug value:", slugValue);
    const serviceName = document.getElementById("service-name");
    const heroStatus = document.getElementById("service-status");
    const heroStatusLabel = document.getElementById("service-status-label");
    const serverSection = document.getElementById("server-section");
    const websiteSection = document.getElementById("website-section");
    const notFound = document.getElementById("not-found");

    const statusLabels = {
      operational: "Operational",
      ok: "Operational",
      online: "Online",
      maintenance: "Maintenance",
      degraded: "Degraded",
      offline: "Offline",
      incident: "Incident",
      minor: "Minor Issue",
      major: "Major Issue",
      planned: "Planned",
      in_progress: "In Progress",
      resolved: "Resolved",
    };

    const badgeVariants = {
      operational: "badge-success",
      ok: "badge-success",
      online: "badge-success",
      maintenance: "badge-warning",
      degraded: "badge-warning",
      offline: "badge-error",
      incident: "badge-error",
      major: "badge-error",
      minor: "badge-warning",
      planned: "badge-info",
      in_progress: "badge-info",
      resolved: "badge-success",
    };

    function badgeClass(value, extra = "") {
      return `badge ${badgeVariants[value] ?? "badge-ghost"} ${extra}`.trim();
    }

    function formatStatus(value) {
      return statusLabels[value] ?? (value ? value.replace(/_/g, " ") : "Unknown");
    }

    function formatDate(iso) {
      return iso
        ? new Date(iso).toLocaleString("fr-FR", { dateStyle: "medium", timeStyle: "short" })
        : "N/A";
    }

    function formatBytes(bytes, decimals = 2) {
      const value = Number(bytes ?? 0);
      if (!value) return "0 Bytes";
      const k = 1024;
      const dm = decimals < 0 ? 0 : decimals;
      const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
      const i = Math.floor(Math.log(value) / Math.log(k));
      return `${parseFloat((value / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;
    }

    function resetSections() {
      serverSection.classList.add("hidden");
      websiteSection.classList.add("hidden");
      notFound.classList.add("hidden");
      serverSection.innerHTML = '<div class="col-span-full skeleton h-48"></div>';
      websiteSection.innerHTML = '<div class="col-span-full skeleton h-48"></div>';
    }

    function showNotFound(name) {
      //serviceName.textContent = name;
      heroStatus.className = badgeClass("offline");
      heroStatusLabel.textContent = "Introuvable";
      notFound.classList.remove("hidden");
      //document.title = name;
    }

    function showDetailMessage(target, message, variant = "alert-info") {
      target.innerHTML = `
        <div class="col-span-full alert ${variant} shadow-lg">
          <span>${message}</span>
        </div>
      `;
      target.classList.remove("hidden");
    }

    function updateHero(service) {
      serviceName.textContent = service.name ?? slugValue;
      heroStatus.className = badgeClass(service.status);
      heroStatusLabel.textContent = formatStatus(service.status);
      document.title = service.name ?? slugValue;
    }

    async function fetchDetails(type) {
      const response = await fetch(
        `https://api.netweak.com/${type}/${encodeURIComponent(slugValue)}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${skibidi}`,
          },
          cache: "no-store",
        }
      );
      if (!response.ok) {
        const message = await response.text();
        throw new Error(message || `HTTP ${response.status}`);
      }
      return response.json();
    }

    function renderServer(details) {
      const payload = details?.payload;
      if (!payload) {
        showDetailMessage(serverSection, "Aucune donnée serveur disponible.", "alert-warning");
        websiteSection.classList.add("hidden");
        return;
      }

      const loadCpu = Number(payload.load_cpu ?? 0);
      const loadRam = Number(payload.load_ram ?? 0);
      const loadDisk = Number(payload.load_disk ?? 0);

      serverSection.innerHTML = `
        <div class="card bg-base-200 shadow-md">
          <div class="card-body items-center text-center">
            <h2 class="card-title">CPU</h2>
            <div
              class="radial-progress text-primary"
              style="--value:${loadCpu}; --size:12rem; --thickness: 1rem;"
              role="progressbar"
            >
              <span class="text-2xl font-bold">${loadCpu.toFixed(0)}%</span>
            </div>
            <p class="text-sm text-base-content/70">${payload.cpu_name ?? "N/A"}</p>
          </div>
        </div>

        <div class="card bg-base-200 shadow-md">
          <div class="card-body items-center text-center">
            <h2 class="card-title">RAM</h2>
            <div
              class="radial-progress text-accent"
              style="--value:${loadRam}; --size:12rem; --thickness: 1rem;"
              role="progressbar"
            >
              <span class="text-2xl font-bold">${loadRam.toFixed(2)}%</span>
            </div>
            <p class="text-sm text-base-content/70">
              ${formatBytes(payload.ram_usage)} / ${formatBytes(payload.ram_total)}
            </p>
          </div>
        </div>

        <div class="card bg-base-200 shadow-md">
          <div class="card-body items-center text-center">
            <h2 class="card-title">Disque</h2>
            <div
              class="radial-progress text-secondary"
              style="--value:${loadDisk}; --size:12rem; --thickness: 1rem;"
              role="progressbar"
            >
              <span class="text-2xl font-bold">${loadDisk.toFixed(2)}%</span>
            </div>
            <p class="text-sm text-base-content/70">
              ${formatBytes(payload.disk_usage)} / ${formatBytes(payload.disk_total)}
            </p>
          </div>
        </div>
      `;
      serverSection.classList.remove("hidden");
      websiteSection.classList.add("hidden");
    }

    function renderWebsite(details, service) {
      const uptime = details?.uptime ?? {};
      const lastCheck = details?.last_check ?? null;
      const certificate = details?.certificate ?? null;

      websiteSection.innerHTML = `
        <div class="card bg-base-200 shadow-md">
          <div class="card-body">
            <h2 class="card-title mb-4">Uptime</h2>
            <div class="stats stats-vertical shadow">
              <div class="stat">
                <div class="stat-title">Aujourd'hui</div>
                <div class="stat-value text-primary">${uptime.day ?? "N/A"}%</div>
              </div>
              <div class="stat">
                <div class="stat-title">Cette semaine</div>
                <div class="stat-value text-primary">${uptime.week ?? "N/A"}%</div>
              </div>
              <div class="stat">
                <div class="stat-title">Ce mois-ci</div>
                <div class="stat-value text-secondary">${uptime.month ?? "N/A"}%</div>
              </div>
            </div>
          </div>
        </div>

        <div class="card bg-base-200 shadow-md">
          <div class="card-body items-center text-center">
            <h2 class="card-title">Dernière Vérification</h2>
            <p class="text-6xl font-bold">
              ${lastCheck?.response_time ?? "N/A"}<span class="text-xl">ms</span>
            </p>
            <div class="${badgeClass(service.status, "mt-2")}">
              ${lastCheck?.response_code ?? "—"} - ${formatStatus(service.status)}
            </div>
            <p class="text-sm text-base-content/70 mt-4">
              ${lastCheck?.created_at ? `Le ${formatDate(lastCheck.created_at)}` : "Date inconnue"}
            </p>
          </div>
        </div>

        ${
          certificate
            ? `
              <div class="card bg-base-200 shadow-md">
                <div class="card-body">
                  <h2 class="card-title mb-2">Certificat SSL</h2>
                  <div class="space-y-3">
                    <p>
                      <span class="font-semibold">Statut :</span>
                      ${
                        certificate.valid
                          ? '<span class="badge badge-success ml-2">Valide</span>'
                          : '<span class="badge badge-error ml-2">Invalide</span>'
                      }
                    </p>
                    <p><span class="font-semibold">Émetteur :</span> ${certificate.issuer ?? "N/A"}</p>
                    <p><span class="font-semibold">Expire le :</span> ${formatDate(certificate.valid_to)}</p>
                  </div>
                </div>
              </div>
            `
            : ""
        }
      `;
      websiteSection.classList.remove("hidden");
      serverSection.classList.add("hidden");
    }

    async function loadService() {
      try {
        resetSections();
        const response = await fetch(SUMMARY_URL, { cache: "no-store" });
        if (!response.ok) throw new Error(`HTTP ${response.status}`);
        const payload = await response.json();
        const services = payload?.services ?? [];
        console.log("Loaded services:", services);
        const service = services.find((entry) => entry.serviceable_id === slugValue);

        if (!service) {
          showNotFound(slugValue);
          return;
        }

        updateHero(service);

        const type = service.type?.includes("server") ? "servers" : "websites";

        try {
          const details = await fetchDetails(type);
          if (type === "servers") {
            renderServer(details);
          } else {
            renderWebsite(details, service);
          }
        } catch (error) {
          console.error("Detailed fetch error:", error);
          if (type === "servers") {
            showDetailMessage(serverSection, "Impossible de charger les métriques serveur.", "alert-error");
            websiteSection.classList.add("hidden");
          } else {
            showDetailMessage(websiteSection, "Impossible de charger les métriques du site.", "alert-error");
            serverSection.classList.add("hidden");
          }
        }
      } catch (error) {
        console.error("Service fetch error:", error);
        heroStatus.className = badgeClass("offline");
        heroStatusLabel.textContent = "Erreur";
        showDetailMessage(serverSection, "Impossible de récupérer le service pour le moment.", "alert-error");
        websiteSection.classList.add("hidden");
      }
    }

    loadService();
    setInterval(loadService, 60000);
  </script>
</Layout>
