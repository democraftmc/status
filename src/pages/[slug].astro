---
import Layout from "../layouts/default.astro";
import { Icon } from "astro-icon/components";

const key = import.meta.env.NETWEAK_API_KEY;

export async function getStaticPaths() {
  
  try {
    const response = await fetch("https://statut.democraft.fr/json", {
      method: "GET",
      headers: { "Content-Type": "application/json"},
    });

    if (!response.ok) {
      console.error(`HTTP error! status: ${response.status}`);
      return [];
    }

    const mainData = await response.json();
    const services = mainData?.services ?? [];

    // Generate paths for all services
    return services.map((service) => ({
      params: { slug: service.serviceable_id },
      props: { service, mainData },
    }));
  } catch (error) {
    console.error("Error fetching services for static paths:", error);
    return [];
  }
}

const { service, mainData } = Astro.props;
const { slug } = Astro.params;
console.log(service);
const serviceId = slug;
let data = service || {};
let serviceType = "websites";
// Service is already passed from getStaticPaths
// No need to fetch main API data again

// Determine if it's a server or website based on service type or other properties
// The API might have a 'type' field or we can infer from the service properties
// Try to determine from service.type, service.kind, or other fields

if (service.type.includes("server")) {
    serviceType = "servers";
}

console.log("Determined service type:", serviceType);
console.log(`https://api.netweak.com/${serviceType}/${serviceId}`)

try {
  const response = await fetch(`https://api.netweak.com/${serviceType}/${serviceId}`, {
    method: "GET",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${key}` },
  });

  if (response.ok) {
    data = await response.json();
    console.log("Detailed service data:", data);
  } else {
    console.error(`Detailed API fetch error: HTTP status ${response.status}`);
  }
} catch (error) {
  console.error(`Detailed API fetch error:`, error);
}

// Status formatting helpers
const statusLabels = {
  operational: "Operational",
  ok: "Operational",
  online: "Online",
  maintenance: "Maintenance",
  degraded: "Degraded",
  offline: "Offline",
  incident: "Incident",
  minor: "Minor Issue",
  major: "Major Issue",
  planned: "Planned",
  in_progress: "In Progress",
  resolved: "Resolved",
};

const formatStatus = (value) => statusLabels[value] ?? value?.replace(/_/g, " ") ?? "Unknown";

const formatDate = (iso) =>
  iso ? new Date(iso).toLocaleString("fr-FR", { dateStyle: "medium", timeStyle: "short" }) : "N/A";

const badgeVariants = {
  operational: "badge-success",
  ok: "badge-success",
  online: "badge-success",
  maintenance: "badge-warning",
  degraded: "badge-warning",
  offline: "badge-error",
  incident: "badge-error",
  major: "badge-error",
  minor: "badge-warning",
  planned: "badge-info",
  in_progress: "badge-info",
  resolved: "badge-success",
};

const badgeClass = (value, extra = "") => `badge ${badgeVariants[value] ?? "badge-ghost"} ${extra}`.trim();

const formatBytes = (bytes, decimals = 2) => {
  if (!+bytes) return "0 Bytes";
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;
};
---

<Layout title={service.name}>
  	<div class="hero home-hero relative">
      <img src="https://wiki.democraft.fr/api/lobby" class="w-full h-96 md:h-112 object-cover rounded-b-3xl shadow-3xl" />
      <a class="absolute top-20 left-2 btn btn-primary" href="/">
        <Icon name="lucide:arrow-left" class="mr-2" />
        Retour
      </a>
      <div class="hero-content text-center">
        <div>
          <h1 class="p-4 mb-2 rounded-lg glass text-3xl md:text-5xl font-bold">{service.name}</h1>
          <span class={badgeClass(data.status)}>
              <div class="inline-grid *:[grid-area:1/1]">
                <div class="status status-neutral animate-ping"></div>
                <div class="status status-neutral"></div>
              </div>
          { formatStatus(data.status) }
            </span>
          <br />
          <a href="#1" aria-label="Scroll vers le bas de la page">
            <iconify-icon icon="lucide:arrow-down" class="font-2xl mt-8" style="font-size: 48px"></iconify-icon>
          </a>
        </div>
      </div>
    </div>

    <main id="1" class="container mx-auto flex flex-col gap-12 px-4 py-12">
      {service.type.includes("server") && data.payload && (
        <section class="grid grid-cols-1 gap-6 md:grid-cols-3">
          <div class="card bg-base-200 shadow-md">
            <div class="card-body items-center text-center">
              <h2 class="card-title">CPU</h2>
              <div
                class="radial-progress text-primary"
                style={`--value:${data.payload.load_cpu}; --size:12rem; --thickness: 1rem;`}
                role="progressbar"
              >
                <span class="text-2xl font-bold">{data.payload.load_cpu}%</span>
              </div>
              <p class="text-sm text-base-content/70">{data.payload.cpu_name}</p>
            </div>
          </div>

          <div class="card bg-base-200 shadow-md">
            <div class="card-body items-center text-center">
              <h2 class="card-title">RAM</h2>
              <div
                class="radial-progress text-accent"
                style={`--value:${data.payload.load_ram}; --size:12rem; --thickness: 1rem;`}
                role="progressbar"
              >
                <span class="text-2xl font-bold">{data.payload.load_ram.toFixed(2)}%</span>
              </div>
              <p class="text-sm text-base-content/70">
                {formatBytes(data.payload.ram_usage)} / {formatBytes(data.payload.ram_total)}
              </p>
            </div>
          </div>

          <div class="card bg-base-200 shadow-md">
            <div class="card-body items-center text-center">
              <h2 class="card-title">Disk</h2>
              <div
                class="radial-progress text-secondary"
                style={`--value:${data.payload.load_disk}; --size:12rem; --thickness: 1rem;`}
                role="progressbar"
              >
                <span class="text-2xl font-bold">{data.payload.load_disk.toFixed(2)}%</span>
              </div>
              <p class="text-sm text-base-content/70">
                {formatBytes(data.payload.disk_usage)} / {formatBytes(data.payload.disk_total)}
              </p>
            </div>
          </div>
        </section>
      )}

      {!service.type.includes("server") && data.last_check && (
        <section class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
          <div class="card bg-base-200 shadow-md">
            <div class="card-body">
              <h2 class="card-title mb-4">Uptime</h2>
              <div class="stats stats-vertical shadow">
                <div class="stat">
                  <div class="stat-title">Aujourd'hui</div>
                  <div class="stat-value text-primary">{data.uptime.day}%</div>
                </div>
                <div class="stat">
                  <div class="stat-title">Cette semaine</div>
                  <div class="stat-value text-primary">{data.uptime.week}%</div>
                </div>
                <div class="stat">
                  <div class="stat-title">Ce mois-ci</div>
                  <div class="stat-value text-secondary">{data.uptime.month}%</div>
                </div>
              </div>
            </div>
          </div>

          <div class="card bg-base-200 shadow-md">
            <div class="card-body items-center text-center">
              <h2 class="card-title">Dernière Vérification</h2>
              <p class="text-6xl font-bold">{data.last_check.response_time}<span class="text-xl">ms</span></p>
              <div class={badgeClass(data.status, "mt-2")}>{data.last_check.response_code} - {formatStatus(data.status)}</div>
              <p class="text-sm text-base-content/70 mt-4">
                Le {formatDate(data.last_check.created_at)}
              </p>
            </div>
          </div>

          {data.certificate && (
            <div class="card bg-base-200 shadow-md">
              <div class="card-body">
                <h2 class="card-title mb-2">Certificat SSL</h2>
                <div class="space-y-3">
                  <p>
                    <span class="font-semibold">Statut :</span>
                    {data.certificate.valid ? (
                      <span class="badge badge-success ml-2">Valide</span>
                    ) : (
                      <span class="badge badge-error ml-2">Invalide</span>
                    )}
                  </p>
                  <p><span class="font-semibold">Émetteur :</span> {data.certificate.issuer}</p>
                  <p><span class="font-semibold">Expire le :</span> {formatDate(data.certificate.valid_to)}</p>
                </div>
              </div>
            </div>
          )}
        </section>
      )}
    </main>
</Layout>
