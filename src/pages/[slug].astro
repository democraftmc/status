---
import Layout from "../layouts/default.astro";
import { Icon } from "astro-icon/components";

const key = import.meta.env.NETWEAK_API_KEY;

export async function getStaticPaths() {
  
  try {
    const response = await fetch("https://statut.democraft.fr/json", {
      method: "GET",
      headers: { "Content-Type": "application/json"},
    });

    if (!response.ok) {
      console.error(`HTTP error! status: ${response.status}`);
      return [];
    }

    const mainData = await response.json();
    const services = mainData?.services ?? [];

    // Generate paths for all services
    return services.map((service) => ({
      params: { slug: service.serviceable_id },
      props: { service, mainData },
    }));
  } catch (error) {
    console.error("Error fetching services for static paths:", error);
    return [];
  }
}

const { service, mainData } = Astro.props;
const { slug } = Astro.params;
console.log(service);
const serviceId = slug;
let data = service || {};
let serviceType = "websites";
// Service is already passed from getStaticPaths
// No need to fetch main API data again

// Determine if it's a server or website based on service type or other properties
// The API might have a 'type' field or we can infer from the service properties
// Try to determine from service.type, service.kind, or other fields

if (!service.type && service.name.toLowerCase().includes("server")) {
    serviceType = "servers";
}

console.log("Determined service type:", serviceType);
console.log(`https://api.netweak.com/${serviceType}/${serviceId}`)

try {
  const response = await fetch(`https://api.netweak.com/${serviceType}/${serviceId}`, {
    method: "GET",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${key}` },
  });

  if (response.ok) {
    data = await response.json();
    console.log("Detailed service data:", data);
  } else {
    console.error(`Detailed API fetch error: HTTP status ${response.status}`);
  }
} catch (error) {
  console.error(`Detailed API fetch error:`, error);
}

// Status formatting helpers
const statusLabels = {
  operational: "Operational",
  ok: "Operational",
  online: "Online",
  maintenance: "Maintenance",
  degraded: "Degraded",
  offline: "Offline",
  incident: "Incident",
  minor: "Minor Issue",
  major: "Major Issue",
  planned: "Planned",
  in_progress: "In Progress",
  resolved: "Resolved",
};

const formatStatus = (value) => statusLabels[value] ?? value?.replace(/_/g, " ") ?? "Unknown";

const formatDate = (iso) =>
  iso ? new Date(iso).toLocaleString("fr-FR", { dateStyle: "medium", timeStyle: "short" }) : "N/A";

const badgeVariants = {
  operational: "badge-success",
  ok: "badge-success",
  online: "badge-success",
  maintenance: "badge-warning",
  degraded: "badge-warning",
  offline: "badge-error",
  incident: "badge-error",
  major: "badge-error",
  minor: "badge-warning",
  planned: "badge-info",
  in_progress: "badge-info",
  resolved: "badge-success",
};

const badgeClass = (value, extra = "") => `badge ${badgeVariants[value] ?? "badge-ghost"} ${extra}`.trim();
---

<Layout title={service.name}>
  	<div class="hero home-hero relative">
      <img src="https://wiki.democraft.fr/api/lobby" class="w-full h-96 md:h-112 object-cover rounded-b-3xl shadow-3xl" />
      <a class="absolute top-20 left-2 btn btn-primary" href="/">
        <Icon name="lucide:arrow-left" class="mr-2" />
        Retour
      </a>
      <div class="hero-content text-center">
        <div>
          <h1 class="p-4 mb-2 rounded-lg glass text-3xl md:text-5xl font-bold">{service.name}</h1>
          <span class={badgeClass(data.status)}>
              <div class="inline-grid *:[grid-area:1/1]">
                <div class="status status-neutral animate-ping"></div>
                <div class="status status-neutral"></div>
              </div>
          { formatStatus(data.status) }
            </span>
          <br />
          <a href="#1" aria-label="Scroll vers le bas de la page">
            <iconify-icon icon="lucide:arrow-down" class="font-2xl mt-8" style="font-size: 48px"></iconify-icon>
          </a>
        </div>
      </div>
    </div>
</Layout>
